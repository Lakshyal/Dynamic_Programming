#include <iostream>

using namespace std;
bool canPlace(int board[][20], int n, int x, int y){

    //Column
    for(int k=0; k<x; k++){
        if(board[k][y]==1){
            return false;
        }
    }
    //Left diag
    int i = x;
    int j = y;
    while(i>=0 and j>=0){
        if(board[i][j]==1){
            return false;
        }
        i--; j--;
    }
    //Right diag
    i = x;
    j = y;
    while (i>=0 and j<n){
        if(board[i][j]==1){
            return false;
        }
        i--; j++;
    }
    return true;
}

void printBoard(int n, int board[][20]){

    for(int i =0; i<n; i++){
        for(int j=0; j<n; j++){
            cout<<board[i][j]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
}

bool solveNOueen(int n, int board[][20], int i){

    //Base case
    if(i==n){
        //print the board
        printBoard(n,board);
        return true;
    }

    //Rec case
    //Try to place a queen in every row
    for(int j=0; j<n; j++){
        //whether the current i,j is safe or not
        if(canPlace(board,n,i,j)){
            board[i][j] = 1;
            bool success = solveNOueen(n,board,i+1);
            if(success){
                return true;
            }
            //backtracking
            board[i][j]=0;
        }
    }
    return false;
}

int main(){
// #ifndef ONLINE_JUDGE
//     freopen("input.txt", "r", stdin);
//     freopen("output.txt", "w", stdout);
// #endif
    int board[20][20]{0};
    int n;
    cin>>n;
    bool k = solveNOueen(n,board,0);
    if(k==false){
        cout<<"FALSE";
    }
    return 0;
}
